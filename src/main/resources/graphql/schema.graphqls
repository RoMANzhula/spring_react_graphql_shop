type User {
    id: ID!
    firstName: String!
    lastName: String!
    email: String!
    phoneNumber: String!
    address: String!
    city: String!
    state: String!
    zipCode: String!
    role: Role!
    password: String!
}

type UserPage {
    users: [User!]!
    totalUsers: Int!
}

enum Role {
    ROLE_ADMIN
    ROLE_CUSTOMER
    ROLE_SELLER
}

input UserInput {
    firstName: String!
    lastName: String!
    email: String!
    phoneNumber: String!
    address: String!
    city: String!
    state: String!
    zipCode: String!
    password: String!
    role: Role!
}

type Query {
    getAllUsers(limit: Int!, offset: Int!): UserPage!
    getUserById(id: ID): User
    getUserByEmail(email: String): User
    getUsersByRole(role: Role): [User]!
}

type AuthResponse {
    jwt: String
    jwtCookie: String
    message: String
}

input LoginRequest {
    email: String!
    password: String!
}

type Mutation {
    addUser(input: UserInput): User
    registerUser(input: UserInput): User
    loginUser(loginRequest: LoginRequest): AuthResponse
    logoutUser: String
}